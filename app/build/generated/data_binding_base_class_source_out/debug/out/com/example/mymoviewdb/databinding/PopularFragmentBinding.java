// Generated by view binder compiler. Do not edit!
package com.example.mymoviewdb.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.mymoviewdb.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class PopularFragmentBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ImageView btnSearch;

  @NonNull
  public final TextView inputResult;

  @NonNull
  public final EditText inputSearch;

  @NonNull
  public final RelativeLayout relativeLayout;

  @NonNull
  public final RelativeLayout relativeLayout2;

  @NonNull
  public final RecyclerView rvPopularMovieDetail;

  @NonNull
  public final TextView txtSearch;

  private PopularFragmentBinding(@NonNull ConstraintLayout rootView, @NonNull ImageView btnSearch,
      @NonNull TextView inputResult, @NonNull EditText inputSearch,
      @NonNull RelativeLayout relativeLayout, @NonNull RelativeLayout relativeLayout2,
      @NonNull RecyclerView rvPopularMovieDetail, @NonNull TextView txtSearch) {
    this.rootView = rootView;
    this.btnSearch = btnSearch;
    this.inputResult = inputResult;
    this.inputSearch = inputSearch;
    this.relativeLayout = relativeLayout;
    this.relativeLayout2 = relativeLayout2;
    this.rvPopularMovieDetail = rvPopularMovieDetail;
    this.txtSearch = txtSearch;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static PopularFragmentBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static PopularFragmentBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.popular_fragment, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static PopularFragmentBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnSearch;
      ImageView btnSearch = ViewBindings.findChildViewById(rootView, id);
      if (btnSearch == null) {
        break missingId;
      }

      id = R.id.inputResult;
      TextView inputResult = ViewBindings.findChildViewById(rootView, id);
      if (inputResult == null) {
        break missingId;
      }

      id = R.id.inputSearch;
      EditText inputSearch = ViewBindings.findChildViewById(rootView, id);
      if (inputSearch == null) {
        break missingId;
      }

      id = R.id.relativeLayout;
      RelativeLayout relativeLayout = ViewBindings.findChildViewById(rootView, id);
      if (relativeLayout == null) {
        break missingId;
      }

      id = R.id.relativeLayout2;
      RelativeLayout relativeLayout2 = ViewBindings.findChildViewById(rootView, id);
      if (relativeLayout2 == null) {
        break missingId;
      }

      id = R.id.rvPopularMovieDetail;
      RecyclerView rvPopularMovieDetail = ViewBindings.findChildViewById(rootView, id);
      if (rvPopularMovieDetail == null) {
        break missingId;
      }

      id = R.id.txtSearch;
      TextView txtSearch = ViewBindings.findChildViewById(rootView, id);
      if (txtSearch == null) {
        break missingId;
      }

      return new PopularFragmentBinding((ConstraintLayout) rootView, btnSearch, inputResult,
          inputSearch, relativeLayout, relativeLayout2, rvPopularMovieDetail, txtSearch);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
